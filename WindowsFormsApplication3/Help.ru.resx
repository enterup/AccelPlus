<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Коротко о программе
Программа написана для балансировки БК моторов.
Данные для балансировки программа может получать:
1.	Через протокол UDP от программы стриминга показаний сенсоров IMU+GPS Stream для платформы Andriod.
2.	Из COM порта. Формат пакета для данных из COM порта : "0,0,X,Y,Z". Где XYZ значения ускорения по соответствующим осям.

Пример скэтча для Arduino и акселерометра Troika 

#include &lt;Wire.h&gt;
#include &lt;troyka-imu.h&gt;
 
Accelerometer accel;
 
void setup()
{
  Serial.begin(38400);
  while (!Serial.available()) 
 {
  }
  accel.begin();
  accel.setRange(RANGE_2);
 }
 
void loop()
{
 String str = "0,0,"+String(accel.readX_G(),2)+","+String(accel.readY_G(),2) + ","+String(accel.readZ_G(),2);
  Serial.println(str);
  delay(30);
}"

Как работать.
1.	Снять с коптера винты.
2.	Установить на телефон с ОС Android программу IMU+GPS Stream.
3.	Задать в программе IMU+GPS Stream IP адрес на котором будет запущена эта программа и UDP Port. По умолчанию 5555.
4.	Запустить программу на компьютере.
5.	Выбрать UDP протокол и указать порт на который IMU+GPS Stream будет присылать данные.
6.	Задать значение таймера с строке «Таймер». Это время в течении которого будут измеряться значения.
7.	Отключить от контроллера квадрокоптера все моторы кроме того который нужно балансировать.
8.	Положить на луч копетра телефон с запущенной программой IMU+GPS Stream.
9.	Запустить двигатель коптера.
10.	Нажать кнопку Старт в программе.
11.	Постепенно увеличивать обороты двигателя пока программа собирает данные о уровне вибрации.
12.	Остановить двигатель коптера.
13.	Прикрепить на произвольное место корпуса двигателя отрезок липкой ленты.
14.	Запустить двигатель на коптере. 
15.	Нажать кнопку Старт.
16.	Постепенно увеличивать обороты двигателя пока программа собирает данные о уровне вибрации.
17.	Если уровень вибрации упал , соответствующие колонки в таблице программы окрасятся в зеленый цвет. Если уровень вибрации повысился – в красный.
18.	Далее сдвигая по корпусу двигателя отрезок липкой ленты добиться минимальных показаний в таблице.
19.	Отбалансировать  таким образом все двигатели.

В таблице отображаются следующие данные:
Время – время сбора показаний.
Имя графика – имя линии в графическом отображении значений ускорений по осям.
Кол-во измеренных значений –количество значений ускорений полученных от программы IMU+GPS Stream.
Размах по X – Разница между максимальным и минимальным значением ускорения по X.
Размах по Y – Разница между максимальным и минимальным значением ускорения по Y.
Размах по Z – Разница между максимальным и минимальным значением ускорения по Z.

Размах по скользящему среднему X – в целях сглаживания внезапных единичных пиков в показаниях акселерометра было введено скользящее среднее значений. В этом поле указывается разница между минимальным и максимальным значением скользящего среднего для ускорения по X.  Сглаживающий интервал для вычисления скользящего среднего задается полем «Сглаживающий интервал» в программе.

Размах по скользящему среднему Y - в целях сглаживания внезапных единичных пиков в показаниях акселерометра было введено скользящее среднее значений. В этом поле указывается разница между минимальным и максимальным значением скользящего среднего для ускорения по Y.  Сглаживающий интервал для вычисления скользящего среднего задается полем «Сглаживающий интервал» в программе.

Размах по скользящему среднему Z - в целях сглаживания внезапных единичных пиков в показаниях акселерометра было введено скользящее среднее значений. В этом поле указывается разница между минимальным и максимальным значением скользящего среднего для ускорения по Z.  Сглаживающий интервал для вычисления скользящего среднего задается полем «Сглаживающий интервал» в программе.</value>
  </data>
</root>